<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net8.0;net8.0-ios</TargetFrameworks>
		<TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net8.0-windows10.0.19041.0</TargetFrameworks>
		<!-- Uncomment to also build the tizen app. You will need to install tizen by following this: https://github.com/Samsung/Tizen.NET -->
		<!-- <TargetFrameworks>$(TargetFrameworks);net8.0-tizen</TargetFrameworks> -->

		<!-- Note for MacCatalyst:
		The default runtime is maccatalyst-x64, except in Release config, in which case the default is maccatalyst-x64;maccatalyst-arm64.
		When specifying both architectures, use the plural <RuntimeIdentifiers> instead of the singular <RuntimeIdentifier>.
		The Mac App Store will NOT accept apps with ONLY maccatalyst-arm64 indicated;
		either BOTH runtimes must be indicated or ONLY macatalyst-x64. -->
		<!-- For example: <RuntimeIdentifiers>maccatalyst-x64;maccatalyst-arm64</RuntimeIdentifiers> -->

		<OutputType Condition="'$(TargetFramework)' != 'net8.0'">Exe</OutputType>
		<RootNamespace>IFRHoldClearanceTrainer</RootNamespace>
		<UseMaui>true</UseMaui>
		<SingleProject>true</SingleProject>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>

		<!-- Display name -->
		<ApplicationTitle>Hold Trainer</ApplicationTitle>

		<!-- App Identifier -->
		<ApplicationId>com.boelenstechnology.ifrholdtrainer</ApplicationId>

		<!-- Versions -->
		<ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
		<ApplicationVersion>1</ApplicationVersion>

		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">16.0</SupportedOSPlatformVersion>
	</PropertyGroup>
	
	<PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net8.0-ios|AnyCPU'">
      <CreatePackage>false</CreatePackage>
      <RuntimeIdentifier>ios-arm64</RuntimeIdentifier>
      <CodesignProvision>IFR Test Provisioning Profile</CodesignProvision>
      <CodesignKey>iPhone Developer: Daniel BOELENS (RS3A2LC3Y4)</CodesignKey>
      <CodesignEntitlements>Platforms\iOS\Entitlements.plist</CodesignEntitlements>
      <MtouchLink>SdkOnly</MtouchLink>
      <MtouchUseLlvm>true</MtouchUseLlvm>
	  <NoSymbolStrip>true</NoSymbolStrip>
    </PropertyGroup>

	<ItemGroup>
		<!-- App Icon -->
		<MauiIcon Include="Resources\AppIcon\appicon.svg" Color="#FFFFFF" />

		<!-- Splash Screen -->
		<MauiSplashScreen Include="Resources\Splash\splash.svg" />

		<!-- Images -->
		<MauiImage Include="Resources\Images\*" />

		<!-- Custom Fonts -->
		<MauiFont Include="Resources\Fonts\*" />

		<!-- Raw Assets (also remove the "Resources\Raw" prefix) -->
		<MauiAsset Include="Resources\Raw\**" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="CommunityToolkit.Maui" Version="9.0.3" />
		<PackageReference Include="Microsoft.Maui.Controls" Version="$(MauiVersion)" />
		<PackageReference Include="Microsoft.Maui.Controls.Compatibility" Version="$(MauiVersion)" />
	</ItemGroup>

	<ItemGroup>
		<Compile Remove="Resources/Images/.DS_Store"/>
	</ItemGroup>

	<PropertyGroup>
		<_LibXamarinLinkMode>static</_LibXamarinLinkMode>
		<_LibMonoLinkMode>static</_LibMonoLinkMode>
	</PropertyGroup>
	<Target Name="_FixMonoLinkMode" AfterTargets="_MonoReadAvailableComponentsManifest">
		<ItemGroup>
		<_MonoRuntimeComponentLinking Remove="dynamic" />
		<_MonoRuntimeComponentLinking Include="static" RuntimeIdentifier="iossimulator-arm64" />
		<_MonoRuntimeComponentLinking Include="static" RuntimeIdentifier="iossimulator-x64" />
		</ItemGroup>
	</Target>
	
	<Target Name="_OverwriteReferencesLinkerFlags" BeforeTargets="_LinkNativeExecutable">
		<!-- Remove the `-u` prefix from `_ReferencesLinkerFlags` so we can give the output file to the platform linker -->
		<!-- NOTE: This step is actually also done after LinkNativeCode task, but we cannot intercept it differently -->
		<WriteLinesToFile SessionId="$(BuildSessionId)" File="$(_MtouchSymbolsList)" Lines="@(_ReferencesLinkerFlags->'%(Identity)'->Substring (2))" Overwrite="true" />

		<ItemGroup>
		<!-- Backup collected required symbols -->
		<_ReferencesLinkerFlagsBackup Include="@(_ReferencesLinkerFlags)" />

		<!-- Clear `_ReferencesLinkerFlags` to prevent required symbols to be passed in -u_symbolName format -->
		<_ReferencesLinkerFlags Remove="@(_ReferencesLinkerFlags)" />
		<!-- Instruct platform linker to only export required symbols -->
		<_ReferencesLinkerFlags Include="-exported_symbols_list" />
		<_ReferencesLinkerFlags Include="$(_MtouchSymbolsList)" />
		</ItemGroup>
	</Target>

	<Target Name="_RestoreReferencesLinkerFlags" AfterTargets="_LinkNativeExecutable">
		<ItemGroup>
		<_ReferencesLinkerFlags Remove="@(_ReferencesLinkerFlags)" />
		<_ReferencesLinkerFlags Include="@(_ReferencesLinkerFlagsBackup)" />
		</ItemGroup>
	</Target>

</Project>
